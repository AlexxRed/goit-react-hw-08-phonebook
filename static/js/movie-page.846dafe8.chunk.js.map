{"version":3,"file":"static/js/movie-page.846dafe8.chunk.js","mappings":"wNAEaA,EAASC,EAAAA,KAAaC,MAAM,CACrCC,KAAMF,EAAAA,KAAaG,WACnBC,OAAQJ,EAAAA,KAAaK,IAAI,GAAGC,WAAWH,a,mBCA9BI,GAAWC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,+KASRE,EAAQF,EAAAA,EAAAA,MAAH,4CAILG,GAAYH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,oHAOTK,EAAYL,EAAAA,EAAAA,OAAH,yN,iDCyCtB,I,MAAA,EAnDA,WAGI,IAAMM,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAWC,EAAAA,EAAAA,MACjBC,QAAQC,IAAIN,GAEZ,IAuBMO,EAAc,SAAAC,GAAO,OAAIC,EAAAA,OAAAA,KAAA,UAAeD,KAE9C,OACI,SAAC,KAAD,CACAE,cA3BkB,CAClBtB,KAAM,GACNE,OAAQ,IA0BRqB,SAvBiB,SAAC,EAAD,GAAsC,IAAnCvB,EAAkC,EAAlCA,KAAME,EAA4B,EAA5BA,OAAYsB,EAAgB,EAAhBA,UAChCC,EAAa,CACfzB,KAAAA,EACAE,OAAAA,GAEAuB,EAAWvB,OAAOwB,OAAS,EAC3BL,EAAAA,OAAAA,KAAY,4CAGZT,EAASe,MAAK,SAAAC,GAAO,OAAIA,EAAQ5B,KAAK6B,gBAAkBJ,EAAWzB,KAAK6B,iBACxER,EAAAA,OAAAA,KAAY,0CAGhBN,GAASe,EAAAA,EAAAA,IAAWL,IACpBD,MAUAO,iBAAkBlC,EAHlB,UAKA,UAACQ,EAAD,CAAU2B,aAAa,MAAvB,WACI,SAACxB,EAAD,CAAOyB,QAAQ,OAAf,mBACA,SAACxB,EAAD,CAAWT,KAAK,OAAOkC,KAAK,OAAOC,YAAY,gBAC/C,SAAC,KAAD,CAAcnC,KAAK,OAAOoC,OAAQjB,KAClC,SAACX,EAAD,CAAOyB,QAAQ,SAAf,qBACA,SAACxB,EAAD,CAAWT,KAAK,SAASkC,KAAK,MAAMC,YAAY,wBAChD,SAAC,KAAD,CAAcnC,KAAK,SAASoC,OAAQjB,KACpC,SAACR,EAAD,CAAWuB,KAAK,SAAhB,+BCzDC1B,EAAQF,EAAAA,EAAAA,MAAH,uLAUL+B,EAAc/B,EAAAA,EAAAA,MAAH,6GCmBxB,EAxBe,WACX,IAAMS,GAAWC,EAAAA,EAAAA,MACXsB,GAASzB,EAAAA,EAAAA,IAAY0B,EAAAA,IAY3B,OAAQ,UAAC,EAAD,oCAEJ,SAACF,EAAD,CACIH,KAAK,OACLM,MAAOF,EACPG,SAfa,SAAAC,GACjBzB,QAAQC,IAAIwB,GACW,KAAnBA,EAAEC,OAAOH,OACTnB,EAAAA,OAAAA,KAAY,4BAEhBN,GAAS6B,EAAAA,EAAAA,IAAUF,EAAEC,OAAOH,QAC5BvB,QAAQC,IAAIwB,EAAEC,OAAOH,OACrBvB,QAAQC,IAAIoB,UCoCpB,EA9CoB,WA0BlB,OACE,iCC1BJ,EAPgBhC,EAAAA,EAAAA,IAAH,sHCeb,MAZA,WACI,OACI,UAAC,EAAD,YACI,uCACI,SAAC,EAAD,KACJ,sCACI,SAAC,EAAD,KACA,SAAC,EAAD","sources":["constants/validationSchema.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.styled.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nexport const schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.number().min(8).positive().required(),\n});","\nimport styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const MainForm = styled(Form)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 200px;\n  padding: 20px 20px 20px 20px;\n  border-radius: 10px; \n  border: 2px dotted #2778a7;\n`;\n\nexport const Label = styled.label`\n  font-size: 18px;\n`;\n\nexport const InputForm = styled(Field)`\n  margin-top: 5px;\n  margin-bottom: 20px;\n  padding: 10px;\n  background-color: #868d79;\n`;\n\nexport const ButtonAdd = styled.button`\n  cursor: pointer;\n  border-radius: 4px;\n  padding: 5px 10px;\n  background-color: green;\n  color: white;\n  font-weight: 500;\n  &:hover,\n  &:focus {\n    background-color: #23647e;\n  }\n`;\n\n","import React from 'react';\nimport { Formik, ErrorMessage } from 'formik';\nimport { schema } from '../../constants/validationSchema';\nimport { MainForm, Label, InputForm, ButtonAdd } from './ContactForm.styled';\n// import { useAddNewContactMutation } from '../../redux/contactsSlice';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../../redux/contactsSlice';\nimport { addContact } from '../../redux/contactsOperations';\n\n// import { useGetContactsQuery } from '../../redux/contactsSlice';\n\n\n\nfunction ContactForm() {\n    // const { data = [] } = useGetContactsQuery();\n    // const [addNewContact] = useAddNewContactMutation();\n    const contacts = useSelector(getContacts);\n    const dispatch = useDispatch();\n    console.log(contacts);\n\n    const initialValues = {\n        name: '',\n        number: '',\n    };\n\n    const handleSubmit = ({ name, number }, { resetForm }) => {\n        const newContact = {\n            name,\n            number,\n        };\n        if (newContact.number.length < 6) {\n            Notify.info('Phone number must be more than 6 numbers');\n            return\n        }\n        if (contacts.find(contact => contact.name.toLowerCase() === newContact.name.toLowerCase())) {\n            Notify.info('Contact with this name already exists')\n            return\n        }\n        dispatch(addContact(newContact))\n        resetForm();\n    };\n    \n    \n    const renderError = message => Notify.info(`${message}`);\n\n    return (\n        <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n        >\n        <MainForm autoComplete=\"off\">\n            <Label htmlFor=\"name\">Name</Label>\n            <InputForm name=\"name\" type=\"text\" placeholder=\"Enter name\" />\n            <ErrorMessage name=\"name\" render={renderError} />\n            <Label htmlFor=\"number\">Number</Label>\n            <InputForm name=\"number\" type=\"tel\" placeholder=\"Enter phone number\" />\n            <ErrorMessage name=\"number\" render={renderError} />\n            <ButtonAdd type=\"submit\">Add contact</ButtonAdd>\n        </MainForm>\n        </Formik>\n    );\n}\n\nexport default ContactForm","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n    display:block;\n    margin-left: auto;\n    margin-right: auto;\n    width: 200px;\n    font-size: 18px;\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const InputFilter = styled.input`\n        padding: 5px;\n        margin-top: 5px;\n        background-color: #749166;\n`;","import { Label, InputFilter } from './Filter.styled';\nimport { setFilter, getFilterValue } from '../../redux/contactsSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(getFilterValue);\n\n    const changeFilter = e => {\n        console.log(e);\n        if (e.target.value === '') {\n            Notify.info('Who are you looking for?')\n        }\n        dispatch(setFilter(e.target.value));\n        console.log(e.target.value);\n        console.log(filter);\n    };\n\n    return (<Label>\n    Find contacts by name\n        <InputFilter\n            type=\"text\"\n            value={filter}\n            onChange={changeFilter} />\n    </Label>)\n};\n\n\nexport default Filter;","// import { List,ButtonDelete, ItemList, ContactName, ContactNumber } from './ContactList.styled';\n// import { useGetContactsQuery, useDeleteContactMutation } from '../../redux/contactsSlice';\n// import { useSelector } from 'react-redux';\n// import { useMemo } from 'react';\n// import { Loader } from 'components/Loader/Loader';\n\n\n\nconst ContactList = () => {\n  // const { data = [], isLoading } = useGetContactsQuery();\n  // const [deleteContacts] = useDeleteContactMutation();\n  // const filter = useSelector(state => state.filter.value);\n\n  // const visibleContacts = useMemo(\n  //   () => {\n  //     const normalizedFilter = filter.toLowerCase();\n  //     return data.filter(el =>\n  //       el.name.toLowerCase().includes(normalizedFilter)\n  //     );\n  //   }, [data, filter]);\n    \n    //   const getVisibleContacts = useCallback(\n    // () => {\n    //     const normalizedFilter = filter.toLowerCase();\n    //     return data.filter(el =>\n    //     el.name.toLowerCase().includes(normalizedFilter)\n    //     );\n    // },[data, filter])\n  // const visibleContacts = [];\n\n  // const deleteContact = id => {\n  //   deleteContacts(id);\n  // };\n\n  return (\n    <p>list</p>\n  //   <List>\n  //   {isLoading && <Loader/>}\n  //   {visibleContacts.length === 0 && <h3>...oops has no contacts :(</h3>}\n  //   {visibleContacts.map(({ id, name, number, phone }) => (\n  //     <ItemList key={id}>\n  //       <p>\n  //         <ContactName>{name}:</ContactName>\n  //         <ContactNumber href={`tel:${number??phone}`}>{number??phone}</ContactNumber>\n  //       </p>\n  //       <ButtonDelete type=\"button\" onClick={() => deleteContact(id)}>\n  //         Delete\n  //       </ButtonDelete>\n  //     </ItemList>\n  //   ))}\n  // </List>\n);\n}\n\nexport default ContactList;","import styled from '@emotion/styled';\n\nconst Section = styled.div`\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    text-align:center;\n`;\n\nexport default Section;","import ContactForm from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter/Filter';\nimport ContactList from '../../components/ContactList/ContactList';\nimport Section from './ContactsPage.styled';\n\nfunction ContactsPage(){\n    return (\n        <Section>\n            <h1>Phonebook</h1>\n                <ContactForm />\n            <h2>Contacts</h2>\n                <Filter />\n                <ContactList />\n        </Section>\n    )\n};\n\nexport default ContactsPage;\n"],"names":["schema","yup","shape","name","required","number","min","positive","MainForm","styled","Form","Label","InputForm","Field","ButtonAdd","contacts","useSelector","getContacts","dispatch","useDispatch","console","log","renderError","message","Notify","initialValues","onSubmit","resetForm","newContact","length","find","contact","toLowerCase","addContact","validationSchema","autoComplete","htmlFor","type","placeholder","render","InputFilter","filter","getFilterValue","value","onChange","e","target","setFilter"],"sourceRoot":""}